{
  "version": 3,
  "sources": ["../../src/index.js"],
  "sourcesContent": ["/*!\n * CSS color - Resolve, parse, convert CSS color.\n * @license MIT\n * @copyright asamuzaK (Kazz)\n * @see {@link https://github.com/asamuzaK/cssColor/blob/main/LICENSE}\n */\n\nimport {\n  convertRgbToHex, convertXyzD50ToLab, convertXyzD50ToLch, convertXyzToHex,\n  convertXyzToHsl, convertXyzToHwb, convertXyzToOklab, convertXyzToOklch,\n  convertXyzToRgb, convertXyzToXyzD50, parseColorFunc, parseColorValue,\n  resolveColorFunc, resolveColorMix, resolveColorValue\n} from './js/color.js';\nimport { getType, isString } from './js/common.js';\n\n/**\n * resolve CSS color\n * @param {string} color - color value\n *  - system colors are not supported\n * @param {object} [opt] - options\n * @param {string} [opt.currentColor] - color to use for 'currentcolor' keyword\n * @param {string} [opt.format] - 'rgb'(default), 'array', 'hex' or 'hexAlpha'\n *   - 'hexAlpha' is a hex color notation with alpha channel, i.e. #rrggbbaa\n * @param {*} [opt.key] - key e.g. CSS property `background-color`\n * @returns {?string|Array} - rgba?(), [r, g, b, a], #rrggbb(aa)?, null\n *   - if `key` is specified, [key, rgba?()|[r, g, b, a]|#rrggbb(aa)?|null]\n *   - in 'rgb', 'r', 'g', 'b' values are rounded\n *   - in 'array', values are floating point\n *   - in 'hex', 'transparent' resolves as 'null'\n */\nexport const resolve = (color, opt = {}) => {\n  if (isString(color)) {\n    color = color.trim();\n  } else {\n    throw new TypeError(`Expected String but got ${getType(color)}.`);\n  }\n  const { currentColor, format, key } = opt;\n  let r, g, b, a;\n  if (/^currentcolor$/i.test(color)) {\n    if (currentColor) {\n      if (currentColor.startsWith('color-mix')) {\n        [r, g, b, a] = resolveColorMix(currentColor);\n      } else if (currentColor.startsWith('color(')) {\n        [r, g, b, a] = resolveColorFunc(currentColor);\n      } else {\n        [r, g, b, a] = resolveColorValue(currentColor);\n      }\n    } else {\n      r = 0;\n      g = 0;\n      b = 0;\n      a = 0;\n    }\n  } else if (/^transparent$/i.test(color)) {\n    r = 0;\n    g = 0;\n    b = 0;\n    a = 0;\n  } else if (color.startsWith('color-mix')) {\n    [r, g, b, a] = resolveColorMix(color);\n  } else if (color.startsWith('color(')) {\n    [r, g, b, a] = resolveColorFunc(color);\n  } else {\n    [r, g, b, a] = resolveColorValue(color);\n  }\n  let res;\n  switch (format) {\n    case 'array': {\n      if (key) {\n        res = [key, [r, g, b, a]];\n      } else {\n        res = [r, g, b, a];\n      }\n      break;\n    }\n    case 'hex': {\n      let hex;\n      if (/^transparent$/i.test(color)) {\n        hex = null;\n      } else {\n        hex = convertRgbToHex([r, g, b]);\n      }\n      if (key) {\n        res = [key, hex];\n      } else {\n        res = hex;\n      }\n      break;\n    }\n    case 'hexAlpha': {\n      let hex;\n      if (/^transparent$/i.test(color)) {\n        hex = '#00000000';\n      } else {\n        hex = convertRgbToHex([r, g, b, a]);\n      }\n      if (key) {\n        res = [key, hex];\n      } else {\n        res = hex;\n      }\n      break;\n    }\n    default: {\n      let rgb;\n      if (a === 1) {\n        rgb = `rgb(${Math.round(r)}, ${Math.round(g)}, ${Math.round(b)})`;\n      } else {\n        rgb =\n          `rgba(${Math.round(r)}, ${Math.round(g)}, ${Math.round(b)}, ${a})`;\n      }\n      if (key) {\n        res = [key, rgb];\n      } else {\n        res = rgb;\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * parse CSS color\n * @param {string} value - color value\n *  - color-mix() and system colors are not supported\n * @param {object} [opt] - options\n * @param {boolean} [opt.d50] - xyz in d50 white point\n * @returns {Array.<number>} - [x, y, z, a] x|y|z: around 0..1 a: 0..1\n */\nexport const parse = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n    if (value.startsWith('color-mix(')) {\n      throw new Error('color-mix() is not supported.');\n    }\n  } else {\n    throw new TypeError(`Expected String but got ${getType(value)}.`);\n  }\n  const { d50 } = opt;\n  let xyz;\n  if (value.startsWith('color(')) {\n    xyz = parseColorFunc(value, d50);\n  } else {\n    xyz = parseColorValue(value, d50);\n  }\n  return xyz;\n};\n\n/**\n * convert\n * @property {Function} xyzD50ToHex - convert xyz d50 to hex\n * @property {Function} xyzD50ToLab - convert xyz d50 to lab\n * @property {Function} xyzD50ToLch - convert xyz d50 to lch\n * @property {Function} xyzD50ToRgb - convert xyz d50 to rgb\n * @property {Function} xyzToHex - convert xyz to hex\n * @property {Function} xyzToHsl - convert xyz to hsl\n * @property {Function} xyzToHwb - convert xyz to hwb\n * @property {Function} xyzToOklab - convert xyz to oklab\n * @property {Function} xyzToOklch - convert xyz to oklch\n * @property {Function} xyzToRgb - convert xyz to rgb\n * @property {Function} xyzToXyzD50 - convert xyz to xyz d50\n */\nexport const convert = {\n  xyzD50ToLab: convertXyzD50ToLab,\n  xyzD50ToLch: convertXyzD50ToLch,\n  xyzToHex: convertXyzToHex,\n  xyzToHsl: convertXyzToHsl,\n  xyzToHwb: convertXyzToHwb,\n  xyzToOklab: convertXyzToOklab,\n  xyzToOklch: convertXyzToOklch,\n  xyzToRgb: convertXyzToRgb,\n  xyzToXyzD50: convertXyzToXyzD50\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "convert", "parse", "resolve", "__toCommonJS", "import_color", "import_common", "color", "opt", "currentColor", "format", "key", "r", "g", "b", "a", "res", "hex", "rgb", "value", "d50", "xyz"]
}
