{
  "version": 3,
  "sources": ["../../src/index.js"],
  "sourcesContent": ["/*!\n * CSS color - Resolve, parse, convert CSS color.\n * @license MIT\n * @copyright asamuzaK (Kazz)\n * @see {@link https://github.com/asamuzaK/cssColor/blob/main/LICENSE}\n */\n\nimport {\n  convertHexToRgb, convertRgbToHex, convertXyzD50ToLab, convertXyzD50ToLch,\n  convertXyzToHex, convertXyzToHsl, convertXyzToHwb, convertXyzToOklab,\n  convertXyzToOklch, convertXyzToRgb, convertXyzToXyzD50, numberToHexString,\n  parseColorFunc, parseColorValue, resolveColorFunc, resolveColorMix,\n  resolveColorValue\n} from './js/color.js';\nimport { getType, isString } from './js/common.js';\n\n/**\n * resolve CSS color\n * @param {string} color - color value\n *   - system colors are not supported\n * @param {object} [opt] - options\n * @param {string} [opt.currentColor] - color to use for `currentcolor` keyword\n * @param {string} [opt.format] - `rgb`(default), `array`, `hex` or `hexAlpha`\n *   - `hexAlpha` is a hex color notation with alpha channel, i.e. #rrggbbaa\n * @param {*} [opt.key] - key e.g. CSS property `background-color`\n * @returns {?string|Array} - rgba?(), [r, g, b, a], #rrggbb(aa)?, null\n *   - if `key` is specified, [key, rgba?()|[r, g, b, a]|#rrggbb(aa)?|null]\n *   - in `rgb`, `r`, `g`, `b` values are rounded,\n *     resolves as empty string if any of `r`, `g`, `b`, `a` is not a number\n *   - in `array`, values are floating point,\n *     if any of `r`, `g`, `b`, `a` is not a number then they stay as is,\n *     e.g. [undefined, undefined, undefined, undefined]\n *   - in `hex`, `transparent` resolves as `null`,\n *     also resolves as `null` if any of `r`, `g`, `b`, `a` is not a number\n *   - in `hexAlpha`, resolves as `null` if any of `r`, `g`, `b`, `a` is not a number\n */\nexport const resolve = (color, opt = {}) => {\n  if (isString(color)) {\n    color = color.trim();\n  } else {\n    throw new TypeError(`Expected String but got ${getType(color)}.`);\n  }\n  const { currentColor, format, key } = opt;\n  let r, g, b, a;\n  if (/^currentcolor$/i.test(color)) {\n    if (currentColor) {\n      if (currentColor.startsWith('color-mix')) {\n        [r, g, b, a] = resolveColorMix(currentColor);\n      } else if (currentColor.startsWith('color(')) {\n        [r, g, b, a] = resolveColorFunc(currentColor);\n      } else {\n        [r, g, b, a] = resolveColorValue(currentColor);\n      }\n    } else {\n      r = 0;\n      g = 0;\n      b = 0;\n      a = 0;\n    }\n  } else if (/^transparent$/i.test(color)) {\n    r = 0;\n    g = 0;\n    b = 0;\n    a = 0;\n  } else if (color.startsWith('color-mix')) {\n    [r, g, b, a] = resolveColorMix(color);\n  } else if (color.startsWith('color(')) {\n    [r, g, b, a] = resolveColorFunc(color);\n  } else {\n    [r, g, b, a] = resolveColorValue(color);\n  }\n  let res;\n  switch (format) {\n    case 'array': {\n      if (key) {\n        res = [key, [r, g, b, a]];\n      } else {\n        res = [r, g, b, a];\n      }\n      break;\n    }\n    case 'hex': {\n      let hex;\n      if (/^transparent$/i.test(color) || isNaN(r) || isNaN(g) || isNaN(b)) {\n        hex = null;\n      } else {\n        hex = convertRgbToHex([r, g, b]);\n      }\n      if (key) {\n        res = [key, hex];\n      } else {\n        res = hex;\n      }\n      break;\n    }\n    case 'hexAlpha': {\n      let hex;\n      if (/^transparent$/i.test(color)) {\n        hex = '#00000000';\n      } else if (isNaN(r) || isNaN(g) || isNaN(b) || isNaN(a)) {\n        hex = null;\n      } else {\n        hex = convertRgbToHex([r, g, b, a]);\n      }\n      if (key) {\n        res = [key, hex];\n      } else {\n        res = hex;\n      }\n      break;\n    }\n    default: {\n      let rgb;\n      if (isNaN(r) || isNaN(g) || isNaN(b) || isNaN(a)) {\n        rgb = '';\n      } else {\n        r = Math.round(r);\n        g = Math.round(g);\n        b = Math.round(b);\n        if (a === 1) {\n          rgb = `rgb(${r}, ${g}, ${b})`;\n        } else {\n          rgb = `rgba(${r}, ${g}, ${b}, ${a})`;\n        }\n      }\n      if (key) {\n        res = [key, rgb];\n      } else {\n        res = rgb;\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * parse CSS color\n * @param {string} value - color value\n *  - color-mix() and system colors are not supported\n * @param {object} [opt] - options\n * @param {boolean} [opt.d50] - xyz in d50 white point\n * @returns {Array.<number>} - [x, y, z, a] x|y|z: around 0..1 a: 0..1\n */\nexport const parse = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n    if (value.startsWith('color-mix(')) {\n      throw new Error('color-mix() is not supported.');\n    }\n  } else {\n    throw new TypeError(`Expected String but got ${getType(value)}.`);\n  }\n  const { d50 } = opt;\n  let xyz;\n  if (value.startsWith('color(')) {\n    xyz = parseColorFunc(value, d50);\n  } else {\n    xyz = parseColorValue(value, d50);\n  }\n  return xyz;\n};\n\n/**\n * convert\n * @property {Function} rgbToHex - convert rgb to hex\n * @property {Function} xyzD50ToHex - convert xyz d50 to hex\n * @property {Function} xyzD50ToLab - convert xyz d50 to lab\n * @property {Function} xyzD50ToLch - convert xyz d50 to lch\n * @property {Function} xyzD50ToRgb - convert xyz d50 to rgb\n * @property {Function} xyzToHex - convert xyz to hex\n * @property {Function} xyzToHsl - convert xyz to hsl\n * @property {Function} xyzToHwb - convert xyz to hwb\n * @property {Function} xyzToOklab - convert xyz to oklab\n * @property {Function} xyzToOklch - convert xyz to oklch\n * @property {Function} xyzToRgb - convert xyz to rgb\n * @property {Function} xyzToXyzD50 - convert xyz to xyz d50\n */\nexport const convert = {\n  hexToRgb: convertHexToRgb,\n  numberToHex: numberToHexString,\n  rgbToHex: convertRgbToHex,\n  xyzD50ToLab: convertXyzD50ToLab,\n  xyzD50ToLch: convertXyzD50ToLch,\n  xyzToHex: convertXyzToHex,\n  xyzToHsl: convertXyzToHsl,\n  xyzToHwb: convertXyzToHwb,\n  xyzToOklab: convertXyzToOklab,\n  xyzToOklch: convertXyzToOklch,\n  xyzToRgb: convertXyzToRgb,\n  xyzToXyzD50: convertXyzToXyzD50\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "convert", "parse", "resolve", "__toCommonJS", "import_color", "import_common", "color", "opt", "currentColor", "format", "key", "g", "b", "a", "res", "hex", "rgb", "value", "d50", "xyz"]
}
