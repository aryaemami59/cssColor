var h=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var z=Object.prototype.hasOwnProperty;var p=(t,x)=>{for(var n in x)h(t,n,{get:x[n],enumerable:!0})},b=(t,x,n,y)=>{if(x&&typeof x=="object"||typeof x=="function")for(let l of T(x))!z.call(t,l)&&l!==n&&h(t,l,{get:()=>x[l],enumerable:!(y=N(x,l))||y.enumerable});return t};var g=t=>b(h({},"__esModule",{value:!0}),t);var u={};p(u,{convert:()=>X,parse:()=>m,resolve:()=>$});module.exports=g(u);var e=require("./js/color.js"),f=require("./js/common.js");/*!
 * CSS color - Resolve, parse, convert CSS color.
 * @license MIT
 * @copyright asamuzaK (Kazz)
 * @see {@link https://github.com/asamuzaK/cssColor/blob/main/LICENSE}
 */const $=(t,x={})=>{if((0,f.isString)(t))t=t.trim();else throw new TypeError(`Expected String but got ${(0,f.getType)(t)}.`);const{currentColor:n,format:y,key:l}=x;let r,s,o,a;/^currentcolor$/i.test(t)?n?n.startsWith("color-mix")?[r,s,o,a]=(0,e.resolveColorMix)(n):n.startsWith("color(")?[r,s,o,a]=(0,e.resolveColorFunc)(n):[r,s,o,a]=(0,e.resolveColorValue)(n):(r=0,s=0,o=0,a=0):/^transparent$/i.test(t)?(r=0,s=0,o=0,a=0):t.startsWith("color-mix")?[r,s,o,a]=(0,e.resolveColorMix)(t):t.startsWith("color(")?[r,s,o,a]=(0,e.resolveColorFunc)(t):[r,s,o,a]=(0,e.resolveColorValue)(t);let c;switch(y){case"array":{l?c=[l,[r,s,o,a]]:c=[r,s,o,a];break}case"hex":{let i;/^transparent$/i.test(t)||isNaN(r)||isNaN(s)||isNaN(o)?i=null:i=(0,e.convertRgbToHex)([r,s,o]),l?c=[l,i]:c=i;break}case"hexAlpha":{let i;/^transparent$/i.test(t)?i="#00000000":isNaN(r)||isNaN(s)||isNaN(o)||isNaN(a)?i=null:i=(0,e.convertRgbToHex)([r,s,o,a]),l?c=[l,i]:c=i;break}default:{let i;isNaN(r)||isNaN(s)||isNaN(o)||isNaN(a)?i="":(r=Math.round(r),s=Math.round(s),o=Math.round(o),a===1?i=`rgb(${r}, ${s}, ${o})`:i=`rgba(${r}, ${s}, ${o}, ${a})`),l?c=[l,i]:c=i}}return c},m=(t,x={})=>{if((0,f.isString)(t)){if(t=t.trim(),t.startsWith("color-mix("))throw new Error("color-mix() is not supported.")}else throw new TypeError(`Expected String but got ${(0,f.getType)(t)}.`);const{d50:n}=x;let y;return t.startsWith("color(")?y=(0,e.parseColorFunc)(t,n):y=(0,e.parseColorValue)(t,n),y},X={xyzD50ToLab:e.convertXyzD50ToLab,xyzD50ToLch:e.convertXyzD50ToLch,xyzToHex:e.convertXyzToHex,xyzToHsl:e.convertXyzToHsl,xyzToHwb:e.convertXyzToHwb,xyzToOklab:e.convertXyzToOklab,xyzToOklch:e.convertXyzToOklch,xyzToRgb:e.convertXyzToRgb,xyzToXyzD50:e.convertXyzToXyzD50};0&&(module.exports={convert,parse,resolve});
//# sourceMappingURL=index.js.map
