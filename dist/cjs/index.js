var f=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var N=Object.prototype.hasOwnProperty;var z=(t,x)=>{for(var a in x)f(t,a,{get:x[a],enumerable:!0})},p=(t,x,a,T)=>{if(x&&typeof x=="object"||typeof x=="function")for(let l of h(x))!N.call(t,l)&&l!==a&&f(t,l,{get:()=>x[l],enumerable:!(T=b(x,l))||T.enumerable});return t};var g=t=>p(f({},"__esModule",{value:!0}),t);var H={};z(H,{convert:()=>u,parse:()=>$,resolve:()=>m});module.exports=g(H);var e=require("./js/color.js"),y=require("./js/common.js");/*!
 * CSS color - Resolve, parse, convert CSS color.
 * @license MIT
 * @copyright asamuzaK (Kazz)
 * @see {@link https://github.com/asamuzaK/cssColor/blob/main/LICENSE}
 */const m=(t,x={})=>{if((0,y.isString)(t))t=t.trim();else throw new TypeError(`Expected String but got ${(0,y.getType)(t)}.`);const{currentColor:a,format:T,key:l}=x;let r,s,o,n;/^currentcolor$/i.test(t)?a?a.startsWith("color-mix")?[r,s,o,n]=(0,e.resolveColorMix)(a):a.startsWith("color(")?[r,s,o,n]=(0,e.resolveColorFunc)(a):[r,s,o,n]=(0,e.resolveColorValue)(a):(r=0,s=0,o=0,n=0):/^transparent$/i.test(t)?(r=0,s=0,o=0,n=0):t.startsWith("color-mix")?[r,s,o,n]=(0,e.resolveColorMix)(t):t.startsWith("color(")?[r,s,o,n]=(0,e.resolveColorFunc)(t):[r,s,o,n]=(0,e.resolveColorValue)(t);let c;switch(T){case"array":{l?c=[l,[r,s,o,n]]:c=[r,s,o,n];break}case"hex":{let i;/^transparent$/i.test(t)||isNaN(r)||isNaN(s)||isNaN(o)?i=null:i=(0,e.convertRgbToHex)([r,s,o]),l?c=[l,i]:c=i;break}case"hexAlpha":{let i;/^transparent$/i.test(t)?i="#00000000":isNaN(r)||isNaN(s)||isNaN(o)||isNaN(n)?i=null:i=(0,e.convertRgbToHex)([r,s,o,n]),l?c=[l,i]:c=i;break}default:{let i;isNaN(r)||isNaN(s)||isNaN(o)||isNaN(n)?i="":(r=Math.round(r),s=Math.round(s),o=Math.round(o),n===1?i=`rgb(${r}, ${s}, ${o})`:i=`rgba(${r}, ${s}, ${o}, ${n})`),l?c=[l,i]:c=i}}return c},$=(t,x={})=>{if((0,y.isString)(t)){if(t=t.trim(),t.startsWith("color-mix("))throw new Error("color-mix() is not supported.")}else throw new TypeError(`Expected String but got ${(0,y.getType)(t)}.`);const{d50:a}=x;let T;return t.startsWith("color(")?T=(0,e.parseColorFunc)(t,a):T=(0,e.parseColorValue)(t,a),T},u={hexToRgb:e.convertHexToRgb,numberToHex:e.numberToHexString,rgbToHex:e.convertRgbToHex,xyzD50ToLab:e.convertXyzD50ToLab,xyzD50ToLch:e.convertXyzD50ToLch,xyzToHex:e.convertXyzToHex,xyzToHsl:e.convertXyzToHsl,xyzToHwb:e.convertXyzToHwb,xyzToOklab:e.convertXyzToOklab,xyzToOklch:e.convertXyzToOklch,xyzToRgb:e.convertXyzToRgb,xyzToXyzD50:e.convertXyzToXyzD50};0&&(module.exports={convert,parse,resolve});
//# sourceMappingURL=index.js.map
